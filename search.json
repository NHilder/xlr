[{"path":"https://nhilder.github.io/xlr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://nhilder.github.io/xlr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://nhilder.github.io/xlr/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://nhilder.github.io/xlr/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://nhilder.github.io/xlr/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://nhilder.github.io/xlr/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://nhilder.github.io/xlr/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://nhilder.github.io/xlr/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://nhilder.github.io/xlr/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://nhilder.github.io/xlr/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://nhilder.github.io/xlr/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://nhilder.github.io/xlr/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://nhilder.github.io/xlr/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://nhilder.github.io/xlr/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://nhilder.github.io/xlr/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://nhilder.github.io/xlr/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://nhilder.github.io/xlr/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://nhilder.github.io/xlr/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://nhilder.github.io/xlr/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://nhilder.github.io/xlr/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://nhilder.github.io/xlr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://nhilder.github.io/xlr/articles/xlr.html","id":"data-clothes_opinions","dir":"Articles","previous_headings":"","what":"Data: clothes_opinions","title":"Getting started with xlr","text":"explore analyse complex data ’ll use dataset clothes_opinions. dataset contains fake survey data peoples opinions clothes well series demographic characteristics. documented ?clothes_opinions. clothes_opinions tibble adapted type data.frame. can learn tibbles https://tibble.tidyverse.org. designed mimic data initially saved .sav file imported haven::import_spss(). Data form can easily exported major survey platforms Qualtrics, includes useful information question labels xlr functions can utilise automatically.","code":"dim(clothes_opinions) #> [1] 1000   20 clothes_opinions #> # A tibble: 1,000 × 20 #>   weight group gender gender2      age age_group Q1_1    Q1_2    Q1_3    Q1_4    #>    <int> <chr> <chr>  <dbl+lbl>  <int> <chr>     <int+l> <int+l> <int+l> <int+l> #> 1   1072 a     female 2 [female]    25 18-30     1 [Str… 5 [Str… 5 [Str… 2 [Dis… #> 2    219 a     female 2 [female]    64 51-65     3 [Neu… 1 [Str… 2 [Dis… 2 [Dis… #> 3   1187 a     male   1 [male]      35 31-40     4 [Agr… 3 [Neu… 5 [Str… 1 [Str… #> 4   1860 a     male   1 [male]      55 51-65     4 [Agr… 1 [Str… 2 [Dis… 2 [Dis… #> # ℹ 996 more rows #> # ℹ 10 more variables: Q2_1 <chr>, Q2_2 <chr>, Q2_3 <chr>, Q2_4 <chr>, #> #   Q2_5 <chr>, Q2_6 <chr>, Q3_1 <dbl+lbl>, Q3_2 <dbl+lbl>, Q3_3 <dbl+lbl>, #> #   Q3_other <chr>"},{"path":"https://nhilder.github.io/xlr/articles/xlr.html","id":"analysing-survey-data","dir":"Articles","previous_headings":"","what":"Analysing survey data","title":"Getting started with xlr","text":"three main functions analyse survey data: build_table() creates 1, 2, 3, … -way tables. build_mtable() creates 1, 2, 3, … -way tables multiple response questions. build_qtable() creates 1, 2, 3, … -way tables block questions. start introducing xlr_table() go functionality. functionality similar build_mtable() build_qtable().","code":""},{"path":"https://nhilder.github.io/xlr/articles/xlr.html","id":"build_table","dir":"Articles","previous_headings":"Analysing survey data","what":"build_table()","title":"Getting started with xlr","text":"function provides roughly functionality base R’s table() except provides lot support easy use. Like functions package, follow convention first argument data.frame (tibble) want work . second argument columns want build table , remainder options build_table(). Let’s first calculate number people gender clothes_opinions: can see outputted table shows number people percentage gender data set. can easily create two three way tables passing additional columns cols argument: cols argument uses tidy selections select columns want make table . See <tidy-select> details selectors. familiar people use dplyr verbs. data returns long format default. Currently wide table table unsupported may included future update.","code":"clothes_opinions |>   build_table(gender2) #> # A xlr_table: 3 x 3 #>   gender2          N Percent #>   <x_vctr>   <x_int> <x_pct> #> 1 male           461     46% #> 2 female         464     46% #> 3 non-binary      75      8% clothes_opinions |>    build_table(c(age_group, gender2),               table_title = \"Gender by age make up of clothing opinion data\") #>  #> ── Gender by age make up of clothing opinion data ────────────────────────────── #> # A xlr_table: 12 x 4 #>   age_group gender2          N Percent #>   <x_vctr>  <x_vctr>   <x_int> <x_pct> #> 1 18-30     male           116     46% #> 2 18-30     female         118     47% #> 3 18-30     non-binary      18      7% #> 4 31-40     male            96     48% #> # ℹ 8 more rows  clothes_opinions |>    build_table(c(age_group, gender2, Q1_1),               table_title = \"Responses to Q1_1 by age and gender\") #>  #> ── Responses to Q1_1 by age and gender ───────────────────────────────────────── #> # A xlr_table: 60 x 5 #>   age_group gender2  Q1_1                    N Percent #>   <x_vctr>  <x_vctr> <x_vctr>          <x_int> <x_pct> #> 1 18-30     male     Strongly Disagree      18     16% #> 2 18-30     male     Disagree               21     18% #> 3 18-30     male     Neutral                26     22% #> 4 18-30     male     Agree                  22     19% #> # ℹ 56 more rows"},{"path":"https://nhilder.github.io/xlr/articles/xlr.html","id":"introduction-to-xlr_table","dir":"Articles","previous_headings":"Analysing survey data > build_table()","what":"Introduction to xlr_table()","title":"Getting started with xlr","text":"can also see special type xlr_table(). S3 class defined xlr help output data Excel. contains table data, table title footnote, well hidden data help format table Excel. can learn xlr_table() vignette . can directly pass title footnote build_table() passing arguments build_table():","code":"clothes_opinions |>   build_table(gender2,               table_title = \"Gender make up of clothing opinion data\",               footnote = \"This shows that the data has a representative sample.\") #>  #> ── Gender make up of clothing opinion data ───────────────────────────────────── #> # A xlr_table: 3 x 3 #>   gender2          N Percent #>   <x_vctr>   <x_int> <x_pct> #> 1 male           461     46% #> 2 female         464     46% #> 3 non-binary      75      8% #> This shows that the data has a representative sample."},{"path":"https://nhilder.github.io/xlr/articles/xlr.html","id":"labels-in-xlr","dir":"Articles","previous_headings":"Analysing survey data > build_table()","what":"Labels in xlr","title":"Getting started with xlr","text":"Now paying close attention, may noticed clothes_opinions$gender2 went haven_labelled xlr_vector(). xlr_vector wrapper around types (see details), base type character(). build_* functions convert data automatically, well pull information labels. See haven’s documentation details labelled type: https://haven.tidyverse.org/reference/labelled.html. Additionally, data labelled, can pull question label metadata automatically include footnote specifying use_questions = TRUE. Columns don’t label ignored.","code":"clothes_opinions |>   build_table(c(age_group, gender2),               table_title = \"Gender by age make up of clothing opinion data\",               use_question = TRUE) #>  #> ── Gender by age make up of clothing opinion data ────────────────────────────── #> # A xlr_table: 12 x 4 #>   age_group gender2          N Percent #>   <x_vctr>  <x_vctr>   <x_int> <x_pct> #> 1 18-30     male           116     46% #> 2 18-30     female         118     47% #> 3 18-30     non-binary      18      7% #> 4 31-40     male            96     48% #> # ℹ 8 more rows #> Questions #> The gender of the participant"},{"path":"https://nhilder.github.io/xlr/articles/xlr.html","id":"weights","dir":"Articles","previous_headings":"Analysing survey data > build_table()","what":"Weights","title":"Getting started with xlr","text":"Weights supported, need pass column name weights wt argument:","code":"clothes_opinions |>   build_table(c(age_group, gender2),               table_title = \"Gender by age make up of clothing opinion data (weighted)\",               wt = weight) #>  #> ── Gender by age make up of clothing opinion data (weighted) ─────────────────── #> # A xlr_table: 12 x 4 #>   age_group gender2            N Percent #>   <x_vctr>  <x_vctr>     <x_dbl> <x_pct> #> 1 18-30     male       122,277.0     47% #> 2 18-30     female     118,532.0     46% #> 3 18-30     non-binary  19,378.0      7% #> 4 31-40     male        94,487.0     47% #> # ℹ 8 more rows"},{"path":"https://nhilder.github.io/xlr/articles/xlr.html","id":"missing-data","dir":"Articles","previous_headings":"Analysing survey data > build_table()","what":"Missing data","title":"Getting started with xlr","text":"build_table() uses complete cases default, one columns row includes single NA removed table calculation. include NA values set use_NA = TRUE. mean NA’s included calculation table: like include NA values one columns recommend using dplyr::filter() demonstrated .","code":"clothes_opinions |>   build_table(c(group, age_group),               table_title = \"Survey group by age make up of clothing opinion data\",               use_NA = TRUE) #>  #> ── Survey group by age make up of clothing opinion data ──────────────────────── #> # A xlr_table: 15 x 4 #>   group    age_group       N Percent #>   <x_vctr> <x_vctr>  <x_int> <x_pct> #> 1 a        18-30         125     27% #> 2 a        31-40          82     17% #> 3 a        41-50         106     23% #> 4 a        51-65         135     29% #> # ℹ 11 more rows clothes_opinions |>   # remove all the rows where group is missing   dplyr::filter(!is.na(group)) |>   # by setting use_NA to true we keep the NA's from the age_group column   build_table(c(group, age_group),               table_title = \"Survey group by age make up of clothing opinion data\",               use_NA = TRUE) #>  #> ── Survey group by age make up of clothing opinion data ──────────────────────── #> # A xlr_table: 10 x 4 #>   group    age_group       N Percent #>   <x_vctr> <x_vctr>  <x_int> <x_pct> #> 1 a        18-30         125     27% #> 2 a        31-40          82     17% #> 3 a        41-50         106     23% #> 4 a        51-65         135     29% #> # ℹ 6 more rows"},{"path":"https://nhilder.github.io/xlr/articles/xlr.html","id":"build_mtable","dir":"Articles","previous_headings":"Analysing survey data","what":"build_mtable()","title":"Getting started with xlr","text":"function design analyse multiple response questions survey data. data must wide data one response per column (remaining responses NA). Qualtrics exports data default. format shown : create table using mcol argument specify mutliple response columns like create table : output N count number people responded multiple response option, N_group total number people responded question. Percent percentage people responded options. can respond multiple options percentage likely add 100. Note, internally build_mtable() uses tidyselect::starts_with() select columns like build table , need pass string mcol. can cut multiple response column data passing columns cols argument. build_table() uses <tidy-eval> select columns. N_group question number people age group responded multiple response question. common mulitple response column include response survey. column needs removed analyse data build_mtable(). recommend using dplyr::select demonstrated : can see build_mtable() automatically converts haven labelled data xlr_vector().","code":"clothes_opinions |>   dplyr::select(starts_with(\"Q2\")) #> # A tibble: 1,000 × 6 #>   Q2_1  Q2_2  Q2_3  Q2_4  Q2_5  Q2_6  #>   <chr> <chr> <chr> <chr> <chr> <chr> #> 1 Red   NA    NA    Blue  Black Grey  #> 2 Red   NA    NA    NA    Black NA    #> 3 Red   NA    Green NA    Black Grey  #> 4 Red   NA    NA    NA    Black NA    #> # ℹ 996 more rows clothes_opinions |>   build_mtable(\"Q2\") #> # A xlr_table: 6 x 4 #>   Q2             N N_group Percent #>   <x_vctr> <x_int> <x_int> <x_pct> #> 1 Black        897     995     90% #> 2 Blue         192     995     19% #> 3 Green        323     995     32% #> 4 Grey         494     995     50% #> # ℹ 2 more rows clothes_opinions |>   build_mtable(mcol = \"Q2\",                cols = age_group) #> # A xlr_table: 24 x 5 #>   age_group Q2             N N_group Percent #>   <x_vctr>  <x_vctr> <x_int> <x_int> <x_pct> #> 1 18-30     Black        228     250     91% #> 2 18-30     Blue          38     250     15% #> 3 18-30     Green         83     250     33% #> 4 18-30     Grey         113     250     45% #> # ℹ 20 more rows clothes_opinions |>   dplyr::select(-Q3_other) |>   build_mtable(mcol = \"Q3\",                cols = age_group) #> # A xlr_table: 12 x 5 #>   age_group Q3              N N_group Percent #>   <x_vctr>  <x_vctr>  <x_int> <x_int> <x_pct> #> 1 18-30     Earrings       77     216     36% #> 2 18-30     Necklaces      54     216     25% #> 3 18-30     Rings         193     216     89% #> 4 31-40     Earrings       55     176     31% #> # ℹ 8 more rows"},{"path":"https://nhilder.github.io/xlr/articles/xlr.html","id":"multiple-multiple-response-columns","dir":"Articles","previous_headings":"Analysing survey data > build_mtable()","what":"Multiple multiple response columns","title":"Getting started with xlr","text":"can pass two multiple response columns build_mtable(), recommend filtering hand. N_group number people age_group responded one options age_group. N number people responded multiple response question group.","code":"clothes_opinions |>   dplyr::select(-Q3_other) |>   build_mtable(mcol = c(\"Q2\",\"Q3\")) #> # A xlr_table: 18 x 5 #>   Q2       Q3              N    N_Q2 Percent #>   <x_vctr> <x_vctr>  <x_int> <x_int> <x_pct> #> 1 Black    Earrings      264     897     29% #> 2 Black    Necklaces     180     897     20% #> 3 Black    Rings         693     897     77% #> 4 Blue     Earrings       59     192     31% #> # ℹ 14 more rows"},{"path":"https://nhilder.github.io/xlr/articles/xlr.html","id":"build_qtable","dir":"Articles","previous_headings":"Analysing survey data","what":"build_qtable()","title":"Getting started with xlr","text":"function designed help analyse block questions. block questions responses use scale (usually matrix question). data form: analyse question block, need pass <tidy-eval> selection function select columns question block. See pass statement made select statement . can cut columns question block another column(s) specifying cols argument. build_table() uses <tidy-eval> select columns.","code":"clothes_opinions |>   dplyr::select(starts_with(\"Q1\")) #> # A tibble: 1,000 × 4 #>   Q1_1                  Q1_2                  Q1_3               Q1_4            #>   <int+lbl>             <int+lbl>             <int+lbl>          <int+lbl>       #> 1 1 [Strongly Disagree] 5 [Strongly Agree]    5 [Strongly Agree] 2 [Disagree]    #> 2 3 [Neutral]           1 [Strongly Disagree] 2 [Disagree]       2 [Disagree]    #> 3 4 [Agree]             3 [Neutral]           5 [Strongly Agree] 1 [Strongly Di… #> 4 4 [Agree]             1 [Strongly Disagree] 2 [Disagree]       2 [Disagree]    #> # ℹ 996 more rows clothes_opinions |>   build_qtable(starts_with(\"Q1\")) #> # A xlr_table: 20 x 4 #>   `Question Block`       value                   N Percent #>   <x_vctr>               <x_vctr>          <x_int> <x_pct> #> 1 Pants are good to wear Strongly Disagree     180     18% #> 2 Pants are good to wear Disagree              194     20% #> 3 Pants are good to wear Neutral               204     21% #> 4 Pants are good to wear Agree                 205     21% #> # ℹ 16 more rows  # You can also select the columns directly clothes_opinions |>   build_qtable(c(Q1_1,Q1_2,Q1_3,Q1_4)) #> # A xlr_table: 20 x 4 #>   `Question Block`       value                   N Percent #>   <x_vctr>               <x_vctr>          <x_int> <x_pct> #> 1 Pants are good to wear Strongly Disagree     180     18% #> 2 Pants are good to wear Disagree              194     20% #> 3 Pants are good to wear Neutral               204     21% #> 4 Pants are good to wear Agree                 205     21% #> # ℹ 16 more rows clothes_opinions |>   build_qtable(starts_with(\"Q1\"),                gender2) #> # A xlr_table: 60 x 5 #>   gender2  `Question Block`       value                   N Percent #>   <x_vctr> <x_vctr>               <x_vctr>          <x_int> <x_pct> #> 1 male     Pants are good to wear Strongly Disagree      75     17% #> 2 male     Pants are good to wear Disagree               96     21% #> 3 male     Pants are good to wear Neutral                97     21% #> 4 male     Pants are good to wear Agree                  89     20% #> # ℹ 56 more rows"},{"path":"https://nhilder.github.io/xlr/articles/xlr.html","id":"xlr_table-xlr-types-and-writing-to-excel","dir":"Articles","previous_headings":"","what":"xlr_table(), xlr types and writing to Excel","title":"Getting started with xlr","text":"key part xlr export data Excel easy, user friendly way. workhorse function scenario xlr_table(), like default options meant function mostly use. xlr_table() tibble::tibble() optional title, footnote, well number formatting options. call xlr_table() converts elements table different xlr types.","code":"clothes_opinions |>   xlr_table(\"This is a title\",              \"this is a footnote with extra information\") #>  #> ── This is a title ───────────────────────────────────────────────────────────── #> # A xlr_table: 1000 x 20 #>    weight group    gender   gender2     age age_group    Q1_1   Q1_2  Q1_3  Q1_4 #>   <x_int> <x_vctr> <x_vctr> <x_dbl> <x_int> <x_vctr>  <x_int> <x_in> <x_i> <x_i> #> 1   1,072 a        female      2.00      25 18-30           1      5     5     2 #> 2     219 a        female      2.00      64 51-65           3      1     2     2 #> 3   1,187 a        male        1.00      35 31-40           4      3     5     1 #> 4   1,860 a        male        1.00      55 51-65           4      1     2     2 #> # ℹ 996 more rows #> # ℹ 10 more variables: Q2_1 <x_vctr>, Q2_2 <x_vctr>, Q2_3 <x_vctr>, #> #   Q2_4 <x_vctr>, Q2_5 <x_vctr>, Q2_6 <x_vctr>, Q3_1 <x_dbl>, Q3_2 <x_dbl>, #> #   Q3_3 <x_dbl>, Q3_other <x_vctr> #> this is a footnote with extra information"},{"path":"https://nhilder.github.io/xlr/articles/xlr.html","id":"types","dir":"Articles","previous_headings":"xlr_table(), xlr types and writing to Excel","what":"Types","title":"Getting started with xlr","text":"xlr types defined help formatting columns output Excel. four difference types defined xlr: xlr_numeric() format doubles neatly. xlr_integer() format integer data neatly. xlr_percent() format numeric data percentage. xlr_vector() general type format data nicely without specific rules. variables contain argument xlr_format takes xlr_format() object. xlr_format() allows control different formatting options data outputted Excel, currently change data looks console. can change font size, colour, text position etc. xlr_format(). See ?xlr_format full range options. xlr_numeric() xlr_percent() can also set number decimal places setting dp=x.","code":""},{"path":"https://nhilder.github.io/xlr/articles/xlr.html","id":"updatingformatting-columns","dir":"Articles","previous_headings":"xlr_table(), xlr types and writing to Excel","what":"Updating/Formatting columns","title":"Getting started with xlr","text":"can update format individual columns using dplyr::mutate base R setting column new formatting options:","code":"table <- xlr_table(mtcars, \"A clever title\", \"A useful footnote\")               # Lets update the format of the mpg column so that it displays using 0 decimal places table$mpg <- xlr_numeric(table$mpg, dp = 0)  # You can also use mutate to achieve the same thing, this is useful for # updating multiple columns either by using across or in a single statement table <- table |>   dplyr::mutate(     mpg = xlr_numeric(mpg, dp = 0),     # convert columns that are integers to xlr_integer type     across(vs:carb, ~ xlr_integer(.x))   )"},{"path":"https://nhilder.github.io/xlr/articles/xlr.html","id":"dplyr-verbs","dir":"Articles","previous_headings":"xlr_table(), xlr types and writing to Excel","what":"dplyr verbs","title":"Getting started with xlr","text":"xlr_table() type implemented work dplyr verbs make working data seamless possible. find see ?xlr_and_dplyr.","code":""},{"path":"https://nhilder.github.io/xlr/articles/xlr.html","id":"writing-data-to-excel","dir":"Articles","previous_headings":"","what":"Writing data to Excel","title":"Getting started with xlr","text":"xlr makes writing data Excel easy using write_xlsx() function. function takes either xlr_table, tibble data.frame. Note output single object need specify output looks like Excel: output xlr_table function additional formatting applied data well title footnote. output looks like Excel: update formatting either need update styles columns using , want modify style table use update_theme. can modify format title, footnote, column heading table body. example shows update title colour red underlined: output looks like : See ?update_theme details.","code":"write_xlsx(mtcars,            file = \"example.xlsx\",            sheet_name = \"example_sheet\") write_xlsx(table,            file = \"example.xlsx\",            sheet_name = \"example_sheet\") #> ℹ Appending file: example.xlsx table <- update_theme(table,                       title_format = xlr_format(font_colour = \"red\",                                                  text_style = \"underline\")) write_xlsx(table,            file = \"example.xlsx\",            sheet_name = \"example_sheet\") #> ℹ Appending file: example.xlsx"},{"path":"https://nhilder.github.io/xlr/articles/xlr.html","id":"write_xlsx-and-list","dir":"Articles","previous_headings":"Writing data to Excel","what":"write_xlsx() and list()","title":"Getting started with xlr","text":"Like openxlsx::write.xlsx() can also pass named list write_xlsx() automatically created sheets Excel file. list() tables, set TOC = TRUE order generate table contents Excel file. particularly useful large number tables.","code":""},{"path":"https://nhilder.github.io/xlr/articles/xlr.html","id":"putting-it-all-together","dir":"Articles","previous_headings":"","what":"Putting it all together","title":"Getting started with xlr","text":"Example can use xlr analyse survey :","code":"output_list <- list()  output_list[[\"gender\"]] <- build_table(clothes_opinions,                                        gender2,                                        \"Gender in clothes opinions survey\")   output_list[[\"gender age\"]] <- build_table(clothes_opinions,                                        c(gender2, age_group),                                        \"Gender by age in clothes opinions survey\")  output_list[[\"gender age\"]] <- build_table(clothes_opinions,                                        c(gender2, age_group),                                        \"Gender by age in clothes opinions survey\")  output_list[[\"opinions\"]] <- build_qtable(clothes_opinions,                                         starts_with(\"Q1\"),                                        table_title = \"Opinions on different clothing items\")  # Sometimes it is neater to use the pipe operator on the data # This also allows auto completion in RStudio for variable names output_list[[\"opinions gender\"]] <-    clothes_opinions |>     build_qtable(starts_with(\"Q1\"),                   gender2,                  table_title = \"Opinions on different clothing items by gender2\",                  use_questions = TRUE)  # now output the data, we turn on the option to generate a table of contents write_xlsx(output_list,            file = \"example2.xlsx\",            TOC = TRUE)"},{"path":"https://nhilder.github.io/xlr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicholas Hilderson. Author, maintainer, copyright holder.","code":""},{"path":"https://nhilder.github.io/xlr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hilderson N (2025). xlr: Create Table Summaries Export Neat Tables 'Excel'. R package version 1.0.3.9000, https://github.com/NHilder/xlr, https://nhilder.github.io/xlr/.","code":"@Manual{,   title = {xlr: Create Table Summaries and Export Neat Tables to 'Excel'},   author = {Nicholas Hilderson},   year = {2025},   note = {R package version 1.0.3.9000, https://github.com/NHilder/xlr},   url = {https://nhilder.github.io/xlr/}, }"},{"path":[]},{"path":"https://nhilder.github.io/xlr/index.html","id":"xlr","dir":"","previous_headings":"","what":"xlr","title":"Create Table Summaries and Export Neat Tables to Excel","text":"xlr designed help build summary tables complex survey data, export data Excel. includes functions easily make cross-tabulations, work multiple response data, question blocks. supports labelled data can generated popular survey platform Qualtrics. makes exporting data Excel easier. easier use wrapper around openxlsx. supports tables footnotes, headers, generating table contents Excel documents. fully featured, designed used moving either statistical summaries tables R Excel. package designed work seamlessly tidyverse family functions. currently experimental subject change based peoples feedback.","code":""},{"path":"https://nhilder.github.io/xlr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create Table Summaries and Export Neat Tables to Excel","text":"can install development version xlr GitHub :","code":"# To install via CRAN install.packages(\"xlr\") # install.packages(\"pak\") pak::pak(\"NHilder/xlr\")"},{"path":"https://nhilder.github.io/xlr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Create Table Summaries and Export Neat Tables to Excel","text":"example create two-way table, fix formatting table, export table Excel. Check vignettes information use package.","code":"library(xlr) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  # create a summary table two_way_table <- build_table(mtcars,c(cyl,gear)) two_way_table #> # A xlr_table: 8 x 4 #>       cyl    gear       N Percent #>   <x_dbl> <x_dbl> <x_int> <x_pct> #> 1    4.00    3.00       1      9% #> 2    4.00    4.00       8     73% #> 3    4.00    5.00       2     18% #> 4    6.00    3.00       2     29% #> 5    6.00    4.00       4     57% #> 6    6.00    5.00       1     14% #> 7    8.00    3.00      12     86% #> 8    8.00    5.00       2     14%  # make the percentage have two decimal places using dplyr two_way_table <- two_way_table |>    mutate(Percent = xlr_percent(Percent, dp = 2))  # write the data to an xlsx file write_xlsx(two_way_table,            \"example.xlsx\",            \"an example\") #> ℹ Appending file: 'example.xlsx'"},{"path":"https://nhilder.github.io/xlr/reference/as_base_r.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert xlr types to their base R type — as_base_r","title":"Convert xlr types to their base R type — as_base_r","text":"as_base_r converts xlr objects, xlr_table, xlr_numeric, xlr_integer, xlr_percent, xlr_format base R type.","code":""},{"path":"https://nhilder.github.io/xlr/reference/as_base_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert xlr types to their base R type — as_base_r","text":"","code":"as_base_r(x)"},{"path":"https://nhilder.github.io/xlr/reference/as_base_r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert xlr types to their base R type — as_base_r","text":"x xlr object","code":""},{"path":"https://nhilder.github.io/xlr/reference/as_base_r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert xlr types to their base R type — as_base_r","text":"base type base R object.","code":""},{"path":"https://nhilder.github.io/xlr/reference/as_base_r.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert xlr types to their base R type — as_base_r","text":"as_base_r generic. wrapper around vec_data convert every object base type.","code":""},{"path":"https://nhilder.github.io/xlr/reference/as_base_r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert xlr types to their base R type — as_base_r","text":"","code":"library(xlr)  # We create a xlr objects a <- xlr_numeric(1:100) b <- xlr_percent(1:100/100) tab <- xlr_table(mtcars,\"a title\",\"a footnote\")  # now lets convert them back to their base types as_base_r(a) #>   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18 #>  [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36 #>  [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54 #>  [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72 #>  [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90 #>  [91]  91  92  93  94  95  96  97  98  99 100 as_base_r(b) #>   [1] 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.10 0.11 0.12 0.13 0.14 0.15 #>  [16] 0.16 0.17 0.18 0.19 0.20 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.30 #>  [31] 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.40 0.41 0.42 0.43 0.44 0.45 #>  [46] 0.46 0.47 0.48 0.49 0.50 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.60 #>  [61] 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.70 0.71 0.72 0.73 0.74 0.75 #>  [76] 0.76 0.77 0.78 0.79 0.80 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.90 #>  [91] 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.00 as_base_r(tab) #>     mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> 2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> 3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> 4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> 5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> 6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> 7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> 8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> 9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> 10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> 11 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> 12 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> 13 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> 14 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> 15 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> 16 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> 17 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> 18 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> 19 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> 20 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> 21 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> 22 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> 23 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> 24 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> 25 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> 26 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> 27 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> 28 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> 29 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> 30 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> 31 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> 32 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"},{"path":"https://nhilder.github.io/xlr/reference/build_mtable.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise a multiple response table — build_mtable","title":"Summarise a multiple response table — build_mtable","text":"function can take one two multiple response responses generate summary table . can also cut columns categorical columns specify cols parameter.","code":""},{"path":"https://nhilder.github.io/xlr/reference/build_mtable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise a multiple response table — build_mtable","text":"","code":"build_mtable(   x,   mcols,   cols = NULL,   table_title = \"\",   use_questions = FALSE,   use_NA = FALSE,   wt = NULL,   footnote = \"\" )"},{"path":"https://nhilder.github.io/xlr/reference/build_mtable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise a multiple response table — build_mtable","text":"x data frame tidy object. mcols column(s) multiple response questions. See Details details columns structured. cols column(s) want calculate sum/percentage multiple response question. table_title title table sheet use_questions data column labels (imported .sav) file, convert column label footnote question. use_NA logical. whether include NA values table. complicated NA processing post creation, recommend using filter. wt Specify weighting variable, NULL weight applied. footnote optional parameter pass custom footnote question, parameter overwrites use_questions.","code":""},{"path":"https://nhilder.github.io/xlr/reference/build_mtable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise a multiple response table — build_mtable","text":"xlr_table object. Use write_xlsx write Excel file. See xlr_table information.","code":""},{"path":"https://nhilder.github.io/xlr/reference/build_mtable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarise a multiple response table — build_mtable","text":"multiple response response series columns single unique response stores survey data respondent may chosen multiple options. function works data stored wide format. valid multiple response column columns start text, contain unique value. form:   popular survey platforms Qualtrics output data type. data long, need pivot data hand, recommend using pivot_wider. default function converts labelled xlr_vector default (underlying character() type). function family (build_table, build_qtable) designed work data columns type haven::labelled, default format data read haven::read_sav/format .sav. .sav default file function type data SPSS can exported popular survey providers Qualtrics. read data haven::read_sav imports data questions, labels response options etc. See labelled read_sav like details importing type.","code":"data.frame(multi_col_1 = c(1,NA,1),            multi_col_2 = c(1,1,1),            multi_col_3 = c(NA,NA,1)  ) #>   multi_col_1 multi_col_2 multi_col_3 #> 1           1           1          NA #> 2          NA           1          NA #> 3           1           1           1"},{"path":"https://nhilder.github.io/xlr/reference/build_mtable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise a multiple response table — build_mtable","text":"","code":"library(xlr) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  # You can use this function to calculate the number of people that have # responded to the question `What is your favourite colour` build_mtable(clothes_opinions,              \"Q2\",              table_title = \"What is your favourite colour?\") #>  #> ── What is your favourite colour? ────────────────────────────────────────────── #> # A xlr_table: 6 x 4 #>   Q2             N N_group Percent #>   <x_vctr> <x_int> <x_int> <x_pct> #> 1 Black        897     995     90% #> 2 Blue         192     995     19% #> 3 Green        323     995     32% #> 4 Grey         494     995     50% #> 5 Red          792     995     80% #> 6 Yellow       208     995     21%  # The function also lets you to see the number of NA questions (this is # where someone doesn't answer any option) build_mtable(clothes_opinions,              \"Q2\",              table_title = \"What is your favourite colour?\",              use_NA = TRUE) #>  #> ── What is your favourite colour? ────────────────────────────────────────────── #> # A xlr_table: 7 x 4 #>   Q2             N N_group Percent #>   <x_vctr> <x_int> <x_int> <x_pct> #> 1 Black        897   1,000     90% #> 2 Blue         192   1,000     19% #> 3 Green        323   1,000     32% #> 4 Grey         494   1,000     49% #> 5 Red          792   1,000     79% #> 6 Yellow       208   1,000     21% #> 7 NA             5   1,000      0%  # You can also cut all questions in the multiple response functions by another # column build_mtable(clothes_opinions,              \"Q2\",              gender2,              table_title = \"Your favourite colour by gender\") #>  #> ── Your favourite colour by gender ───────────────────────────────────────────── #> # A xlr_table: 18 x 5 #>    gender2    Q2             N N_group Percent #>    <x_vctr>   <x_vctr> <x_int> <x_int> <x_pct> #>  1 male       Black        413     460     90% #>  2 male       Blue          82     460     18% #>  3 male       Green        144     460     31% #>  4 male       Grey         225     460     49% #>  5 male       Red          371     460     81% #>  6 male       Yellow        95     460     21% #>  7 female     Black        413     460     90% #>  8 female     Blue          97     460     21% #>  9 female     Green        158     460     34% #> 10 female     Grey         237     460     52% #> 11 female     Red          356     460     77% #> 12 female     Yellow        94     460     20% #> 13 non-binary Black         71      75     95% #> 14 non-binary Blue          13      75     17% #> 15 non-binary Green         21      75     28% #> 16 non-binary Grey          32      75     43% #> 17 non-binary Red           65      75     87% #> 18 non-binary Yellow        19      75     25%  # By setting `use_questions=TRUE` then the footnote will be the questions # labels. This is useful to see what the question is. # The function will try to pull out this based on the question label, and # will manipulate try and get the correct label. build_mtable(clothes_opinions,              \"Q2\",              gender2,              table_title = \"Your favourite colour by gender\",              use_questions = TRUE) #>  #> ── Your favourite colour by gender ───────────────────────────────────────────── #> # A xlr_table: 18 x 5 #>    gender2    Q2             N N_group Percent #>    <x_vctr>   <x_vctr> <x_int> <x_int> <x_pct> #>  1 male       Black        413     460     90% #>  2 male       Blue          82     460     18% #>  3 male       Green        144     460     31% #>  4 male       Grey         225     460     49% #>  5 male       Red          371     460     81% #>  6 male       Yellow        95     460     21% #>  7 female     Black        413     460     90% #>  8 female     Blue          97     460     21% #>  9 female     Green        158     460     34% #> 10 female     Grey         237     460     52% #> 11 female     Red          356     460     77% #> 12 female     Yellow        94     460     20% #> 13 non-binary Black         71      75     95% #> 14 non-binary Blue          13      75     17% #> 15 non-binary Green         21      75     28% #> 16 non-binary Grey          32      75     43% #> 17 non-binary Red           65      75     87% #> 18 non-binary Yellow        19      75     25% #> Questions #> The gender of the participant  # It is common for your data to include 'other' responses in a multiple # response column. You should remove the column before running build_mtable clothes_opinions |>   select(-Q3_other) |>   build_mtable(\"Q3\") #> # A xlr_table: 3 x 4 #>   Q3              N N_group Percent #>   <x_vctr>  <x_int> <x_int> <x_pct> #> 1 Earrings      290     869     33% #> 2 Necklaces     201     869     23% #> 3 Rings         783     869     90%  # You can also specify up to a maxium of two different multiple response # columns. clothes_opinions |>   select(-Q3_other) |>   build_mtable(c(\"Q2\", \"Q3\")) #> # A xlr_table: 18 x 5 #>    Q2       Q3              N    N_Q2 Percent #>    <x_vctr> <x_vctr>  <x_int> <x_int> <x_pct> #>  1 Black    Earrings      264     897     29% #>  2 Black    Necklaces     180     897     20% #>  3 Black    Rings         693     897     77% #>  4 Blue     Earrings       59     192     31% #>  5 Blue     Necklaces      49     192     26% #>  6 Blue     Rings         145     192     76% #>  7 Green    Earrings       98     323     30% #>  8 Green    Necklaces      73     323     23% #>  9 Green    Rings         247     323     76% #> 10 Grey     Earrings      143     494     29% #> 11 Grey     Necklaces      96     494     19% #> 12 Grey     Rings         391     494     79% #> 13 Red      Earrings      228     792     29% #> 14 Red      Necklaces     160     792     20% #> 15 Red      Rings         620     792     78% #> 16 Yellow   Earrings       52     208     25% #> 17 Yellow   Necklaces      35     208     17% #> 18 Yellow   Rings         161     208     77%  # These cam also be cut by other columns. clothes_opinions |>   select(-Q3_other) |>   build_mtable(c(\"Q2\", \"Q3\"),                gender2) #> # A xlr_table: 54 x 6 #>    gender2  Q2       Q3              N N_group Percent #>    <x_vctr> <x_vctr> <x_vctr>  <x_int> <x_int> <x_pct> #>  1 male     Black    Earrings      127     413     31% #>  2 male     Black    Necklaces      78     413     19% #>  3 male     Black    Rings         315     413     76% #>  4 male     Blue     Earrings       23      82     28% #>  5 male     Blue     Necklaces      21      82     26% #>  6 male     Blue     Rings          61      82     74% #>  7 male     Green    Earrings       43     144     30% #>  8 male     Green    Necklaces      31     144     22% #>  9 male     Green    Rings         108     144     75% #> 10 male     Grey     Earrings       72     225     32% #> # ℹ 44 more rows  # This function also supports weights and manual footnotes clothes_opinions |>   select(-Q3_other) |>   build_mtable(c(\"Q2\", \"Q3\"),                gender2,                wt = weight,                footnote = \"This is an example footnote.\") #> # A xlr_table: 54 x 6 #>    gender2  Q2       Q3                N   N_group Percent #>    <x_vctr> <x_vctr> <x_vctr>    <x_dbl>   <x_dbl> <x_pct> #>  1 male     Black    Earrings  127,605.0 422,100.0     30% #>  2 male     Black    Necklaces  73,623.0 422,100.0     17% #>  3 male     Black    Rings     326,852.0 422,100.0     77% #>  4 male     Blue     Earrings   20,749.0  78,108.0     27% #>  5 male     Blue     Necklaces  15,806.0  78,108.0     20% #>  6 male     Blue     Rings      54,686.0  78,108.0     70% #>  7 male     Green    Earrings   44,326.0 146,440.0     30% #>  8 male     Green    Necklaces  29,053.0 146,440.0     20% #>  9 male     Green    Rings     110,288.0 146,440.0     75% #> 10 male     Grey     Earrings   76,754.0 232,228.0     33% #> # ℹ 44 more rows #> This is an example footnote."},{"path":"https://nhilder.github.io/xlr/reference/build_qtable.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise a question block — build_qtable","title":"Summarise a question block — build_qtable","text":"function helps analyse block questions matrix questions single table. also lets user cut questions questions data. block questions mush response options.","code":""},{"path":"https://nhilder.github.io/xlr/reference/build_qtable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise a question block — build_qtable","text":"","code":"build_qtable(   x,   block_cols,   cols = NULL,   table_title = \"\",   use_questions = FALSE,   use_NA = FALSE,   wt = NULL,   footnote = \"\" )"},{"path":"https://nhilder.github.io/xlr/reference/build_qtable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise a question block — build_qtable","text":"x data frame tidy object block_cols <tidyr_tidy_select> statement. columns make question block, must response option. question block columns start piece text, use starts_with('column_text'). See Examples . cols <tidyr_tidy_select> statement. column(s) want cut questions question block . table_title string. title table sheet use_questions logical. data column labels (imported .sav) file, convert column label footnote question. use_NA logical. Whether include NA values table. complicated NA processing post creation, recommend using filter. wt quoted unquote column name. Specify weighting variable, NULL weight applied. footnote character vector. Optional parameter pass custom footnote question, parameter overwrites use_questions.","code":""},{"path":"https://nhilder.github.io/xlr/reference/build_qtable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise a question block — build_qtable","text":"xlr_table object. Use write_xlsx write Excel file. See xlr_table information.","code":""},{"path":"https://nhilder.github.io/xlr/reference/build_qtable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarise a question block — build_qtable","text":"function family (build_table, build_qtable) designed work data columns type haven::labelled, default format data read haven::read_sav/format .sav. .sav default file function type data SPSS can exported popular survey providers Qualtrics. read data haven::read_sav imports data questions, labels response options etc. default function converts labelled xlr_vector default (underlying character() type). See labelled read_sav like details importing type.","code":""},{"path":"https://nhilder.github.io/xlr/reference/build_qtable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise a question block — build_qtable","text":"","code":"library(xlr)  # You can use this function to get a block of questions build_qtable(   clothes_opinions,   starts_with(\"Q1\"),   table_title = \"This is an example table\") #>  #> ── This is an example table ──────────────────────────────────────────────────── #> # A xlr_table: 20 x 4 #>    `Question Block`        value                   N Percent #>    <x_vctr>                <x_vctr>          <x_int> <x_pct> #>  1 Pants are good to wear  Strongly Disagree     180     18% #>  2 Pants are good to wear  Disagree              194     20% #>  3 Pants are good to wear  Neutral               204     21% #>  4 Pants are good to wear  Agree                 205     21% #>  5 Pants are good to wear  Strongly Agree        192     20% #>  6 Shirts are good to wear Strongly Disagree     192     20% #>  7 Shirts are good to wear Disagree              173     18% #>  8 Shirts are good to wear Neutral               227     23% #>  9 Shirts are good to wear Agree                 195     20% #> 10 Shirts are good to wear Strongly Agree        188     19% #> 11 Shoes are good to wear  Strongly Disagree     210     22% #> 12 Shoes are good to wear  Disagree              191     20% #> 13 Shoes are good to wear  Neutral               188     19% #> 14 Shoes are good to wear  Agree                 211     22% #> 15 Shoes are good to wear  Strongly Agree        175     18% #> 16 Q1_4                    Strongly Disagree     201     21% #> 17 Q1_4                    Disagree              190     19% #> 18 Q1_4                    Neutral               183     19% #> 19 Q1_4                    Agree                 203     21% #> 20 Q1_4                    Strongly Agree        198     20%  # Another way you could select the same columns build_qtable(   clothes_opinions,   c(Q1_1,Q1_2,Q1_3,Q1_4),   table_title = \"This is an example table\") #>  #> ── This is an example table ──────────────────────────────────────────────────── #> # A xlr_table: 20 x 4 #>    `Question Block`        value                   N Percent #>    <x_vctr>                <x_vctr>          <x_int> <x_pct> #>  1 Pants are good to wear  Strongly Disagree     180     18% #>  2 Pants are good to wear  Disagree              194     20% #>  3 Pants are good to wear  Neutral               204     21% #>  4 Pants are good to wear  Agree                 205     21% #>  5 Pants are good to wear  Strongly Agree        192     20% #>  6 Shirts are good to wear Strongly Disagree     192     20% #>  7 Shirts are good to wear Disagree              173     18% #>  8 Shirts are good to wear Neutral               227     23% #>  9 Shirts are good to wear Agree                 195     20% #> 10 Shirts are good to wear Strongly Agree        188     19% #> 11 Shoes are good to wear  Strongly Disagree     210     22% #> 12 Shoes are good to wear  Disagree              191     20% #> 13 Shoes are good to wear  Neutral               188     19% #> 14 Shoes are good to wear  Agree                 211     22% #> 15 Shoes are good to wear  Strongly Agree        175     18% #> 16 Q1_4                    Strongly Disagree     201     21% #> 17 Q1_4                    Disagree              190     19% #> 18 Q1_4                    Neutral               183     19% #> 19 Q1_4                    Agree                 203     21% #> 20 Q1_4                    Strongly Agree        198     20%  # Yet another way to select the same columns build_qtable(   clothes_opinions,   all_of(c(\"Q1_1\",\"Q1_2\",\"Q1_3\",\"Q1_4\")),   table_title = \"This is an example table\") #>  #> ── This is an example table ──────────────────────────────────────────────────── #> # A xlr_table: 20 x 4 #>    `Question Block`        value                   N Percent #>    <x_vctr>                <x_vctr>          <x_int> <x_pct> #>  1 Pants are good to wear  Strongly Disagree     180     18% #>  2 Pants are good to wear  Disagree              194     20% #>  3 Pants are good to wear  Neutral               204     21% #>  4 Pants are good to wear  Agree                 205     21% #>  5 Pants are good to wear  Strongly Agree        192     20% #>  6 Shirts are good to wear Strongly Disagree     192     20% #>  7 Shirts are good to wear Disagree              173     18% #>  8 Shirts are good to wear Neutral               227     23% #>  9 Shirts are good to wear Agree                 195     20% #> 10 Shirts are good to wear Strongly Agree        188     19% #> 11 Shoes are good to wear  Strongly Disagree     210     22% #> 12 Shoes are good to wear  Disagree              191     20% #> 13 Shoes are good to wear  Neutral               188     19% #> 14 Shoes are good to wear  Agree                 211     22% #> 15 Shoes are good to wear  Strongly Agree        175     18% #> 16 Q1_4                    Strongly Disagree     201     21% #> 17 Q1_4                    Disagree              190     19% #> 18 Q1_4                    Neutral               183     19% #> 19 Q1_4                    Agree                 203     21% #> 20 Q1_4                    Strongly Agree        198     20% # You can also cut all questions in the block by a single column build_qtable(   clothes_opinions,   starts_with(\"Q1\"),   gender2,   table_title = \"This is the second example table\") #>  #> ── This is the second example table ──────────────────────────────────────────── #> # A xlr_table: 60 x 5 #>    gender2  `Question Block`        value                   N Percent #>    <x_vctr> <x_vctr>                <x_vctr>          <x_int> <x_pct> #>  1 male     Pants are good to wear  Strongly Disagree      75     17% #>  2 male     Pants are good to wear  Disagree               96     21% #>  3 male     Pants are good to wear  Neutral                97     21% #>  4 male     Pants are good to wear  Agree                  89     20% #>  5 male     Pants are good to wear  Strongly Agree         95     21% #>  6 male     Shirts are good to wear Strongly Disagree      85     19% #>  7 male     Shirts are good to wear Disagree               84     19% #>  8 male     Shirts are good to wear Neutral                96     21% #>  9 male     Shirts are good to wear Agree                  90     20% #> 10 male     Shirts are good to wear Strongly Agree         97     21% #> # ℹ 50 more rows  # You can also cut all questions in the block by a multiple columns # By setting `use_questions=TRUE` then the footnote will be the questions # labels, for the cut questions build_qtable(   clothes_opinions,   starts_with(\"Q1\"),   c(gender2,age_group),   table_title = \"This is the third example table\",   use_questions = TRUE) #>  #> ── This is the third example table ───────────────────────────────────────────── #> # A xlr_table: 240 x 6 #>    gender2  age_group `Question Block`        value                   N Percent #>    <x_vctr> <x_vctr>  <x_vctr>                <x_vctr>          <x_int> <x_pct> #>  1 male     18-30     Pants are good to wear  Strongly Disagree      16     14% #>  2 male     18-30     Pants are good to wear  Disagree               21     18% #>  3 male     18-30     Pants are good to wear  Neutral                26     23% #>  4 male     18-30     Pants are good to wear  Agree                  22     19% #>  5 male     18-30     Pants are good to wear  Strongly Agree         29     25% #>  6 male     18-30     Shirts are good to wear Strongly Disagree      18     16% #>  7 male     18-30     Shirts are good to wear Disagree               23     20% #>  8 male     18-30     Shirts are good to wear Neutral                26     23% #>  9 male     18-30     Shirts are good to wear Agree                  18     16% #> 10 male     18-30     Shirts are good to wear Strongly Agree         29     25% #> # ℹ 230 more rows #> Questions #> The gender of the participant  # You can also use weights, these weights can be either doubles or integers # based weights # You can also set a footnote build_qtable(   clothes_opinions,   starts_with(\"Q1\"),   age_group,   table_title = \"This is the fourth example table\",   wt = weight,   footnote = paste0(\"This is a footnote, you can use it if you want \",                     \"more detail in your table.\")) #>  #> ── This is the fourth example table ──────────────────────────────────────────── #> # A xlr_table: 80 x 5 #>    age_group `Question Block`        value                    N Percent #>    <x_vctr>  <x_vctr>                <x_vctr>           <x_dbl> <x_pct> #>  1 18-30     Pants are good to wear  Strongly Disagree 39,736.0     16% #>  2 18-30     Pants are good to wear  Disagree          48,447.0     19% #>  3 18-30     Pants are good to wear  Neutral           60,462.0     24% #>  4 18-30     Pants are good to wear  Agree             47,143.0     19% #>  5 18-30     Pants are good to wear  Strongly Agree    58,756.0     23% #>  6 18-30     Shirts are good to wear Strongly Disagree 47,604.0     19% #>  7 18-30     Shirts are good to wear Disagree          48,981.0     19% #>  8 18-30     Shirts are good to wear Neutral           56,225.0     22% #>  9 18-30     Shirts are good to wear Agree             48,690.0     19% #> 10 18-30     Shirts are good to wear Strongly Agree    53,044.0     21% #> # ℹ 70 more rows #> This is a footnote, you can use it if you want more detail in your table."},{"path":"https://nhilder.github.io/xlr/reference/build_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a one, two, three,..., n-way table — build_table","title":"Create a one, two, three,..., n-way table — build_table","text":"build_table creates one, two, three, ..., n-way table. used calculate count percentage different categorical variables. gives data back long format. percentages calculated 'row' percentages.","code":""},{"path":"https://nhilder.github.io/xlr/reference/build_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a one, two, three,..., n-way table — build_table","text":"","code":"build_table(   x,   cols,   table_title = \"\",   use_questions = FALSE,   use_NA = FALSE,   wt = NULL,   footnote = \"\" )"},{"path":"https://nhilder.github.io/xlr/reference/build_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a one, two, three,..., n-way table — build_table","text":"x data frame tidy object. cols <tidyr_tidy_select> column(s) want calculate count percentage . table_title string. title table sheet. use_questions logical. data column labels convert column label footnote question. See details information. use_NA logical. Whether include NA values table. complicated NA processing post creation, recommend using filter. wt quoted unquote column name. Specify weighting variable, NULL weight applied. footnote character vector. Optional parameter pass custom footnote question, parameter overwrites use_questions.","code":""},{"path":"https://nhilder.github.io/xlr/reference/build_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a one, two, three,..., n-way table — build_table","text":"xlr_table object. Use write_xlsx write Excel file. See xlr_table information.","code":""},{"path":"https://nhilder.github.io/xlr/reference/build_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a one, two, three,..., n-way table — build_table","text":"function family (build_mtable, build_qtable) designed work data columns type haven::labelled, default format data read haven::read_sav/format .sav. .sav default file function type data SPSS can exported popular survey providers Qualtrics. read data haven::read_sav imports data questions, labels response options etc. default function converts labelled xlr_vector default (underlying character() type). See labelled read_sav like details importing type.","code":""},{"path":"https://nhilder.github.io/xlr/reference/build_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a one, two, three,..., n-way table — build_table","text":"","code":"library(xlr)  # You can use this function to calculate the number count and percentage # of a categorical variable build_table(   clothes_opinions,   gender,   table_title = \"The count of the gender groups\") #>  #> ── The count of the gender groups ────────────────────────────────────────────── #> # A xlr_table: 3 x 3 #>   gender           N Percent #>   <x_vctr>   <x_int> <x_pct> #> 1 female         464     46% #> 2 male           461     46% #> 3 non-binary      75      8%  # You must use a `tidyselect` statement, to select the columns that you wish to # calculate the count, and group percentage. # This will calculate the number of observations in each group of age and # gender. # The percentage will be the percentage of each age_group in each gender # group (the row percentage). build_table(   clothes_opinions,   c(gender,age_group),   table_title = \"This is the second example table\") #>  #> ── This is the second example table ──────────────────────────────────────────── #> # A xlr_table: 12 x 4 #>    gender     age_group       N Percent #>    <x_vctr>   <x_vctr>  <x_int> <x_pct> #>  1 female     18-30         118     27% #>  2 female     31-40          87     20% #>  3 female     41-50          95     22% #>  4 female     51-65         139     32% #>  5 male       18-30         116     26% #>  6 male       31-40          96     22% #>  7 male       41-50          82     19% #>  8 male       51-65         146     33% #>  9 non-binary 18-30          18     25% #> 10 non-binary 31-40          19     27% #> 11 non-binary 41-50          18     25% #> 12 non-binary 51-65          16     23%  # You can use more complicated tidy select statements if you have a large number # of columns, but this is probably not recommended # # Using use_questions, if you have labelled data, it will take the label and # include it as a footnote. # This is useful for when you have exported data from survey platforms # as a .sav, use `haven::read_sav` to load it into your R environment. build_table(   clothes_opinions,   c(group:gender,Q1_1),   table_title = \"This is the third example table\",   use_questions = TRUE) #>  #> ── This is the third example table ───────────────────────────────────────────── #> # A xlr_table: 30 x 5 #>    group    gender   Q1_1                    N Percent #>    <x_vctr> <x_vctr> <x_vctr>          <x_int> <x_pct> #>  1 a        female   Strongly Disagree      40     18% #>  2 a        female   Disagree               39     18% #>  3 a        female   Neutral                46     21% #>  4 a        female   Agree                  53     24% #>  5 a        female   Strongly Agree         41     19% #>  6 a        male     Strongly Disagree      38     17% #>  7 a        male     Disagree               44     20% #>  8 a        male     Neutral                46     21% #>  9 a        male     Agree                  44     20% #> 10 a        male     Strongly Agree         46     21% #> # ℹ 20 more rows #> Questions #> Pants are good to wear  # You can also use weights, these weights can be either doubles or integers # based weights # You can also set a footnote manually build_table(   clothes_opinions,   age_group,   table_title = \"This is the fourth example table\",   wt = weight,   footnote = paste0(\"This is a footnote, you can use it if you want\",                     \"more detail in your table.\")) #>  #> ── This is the fourth example table ──────────────────────────────────────────── #> # A xlr_table: 4 x 3 #>   age_group         N Percent #>   <x_vctr>    <x_dbl> <x_pct> #> 1 18-30     260,187.0     27% #> 2 31-40     202,597.0     21% #> 3 41-50     207,621.0     21% #> 4 51-65     302,365.0     31% #> This is a footnote, you can use it if you wantmore detail in your table."},{"path":"https://nhilder.github.io/xlr/reference/clothes_opinions.html","id":null,"dir":"Reference","previous_headings":"","what":"Clothes opinions data — clothes_opinions","title":"Clothes opinions data — clothes_opinions","text":"fake data set used show work xlr package.","code":""},{"path":"https://nhilder.github.io/xlr/reference/clothes_opinions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clothes opinions data — clothes_opinions","text":"","code":"clothes_opinions"},{"path":[]},{"path":"https://nhilder.github.io/xlr/reference/clothes_opinions.html","id":"clothes-opinions","dir":"Reference","previous_headings":"","what":"clothes_opinions","title":"Clothes opinions data — clothes_opinions","text":"data frame 1000 rows 20 variables. weight Fake survey weights group grouping variable gender character vector gender gender2 haven labelled vector gender age continuous age variable age_group character vector grouped age, generated age Q1_1 first column question block asking whether pants good wear. Likert scale. Q1_2 second column question block asking whether shirts good wear. Likert scale. Q1_3 third column question block asking whether shoes good wear. Likert scale. Q1_4 forth column question block asking whether pants good wear. Likert scale. column intentionally label. Q2_1,2,3,4,5,6 Multiple response columns. Question asking favourite colour wear. Q3_1,2,3 Multiple response columns. Question asking favourite jewellery wear. Q3_other column question 3","code":""},{"path":"https://nhilder.github.io/xlr/reference/create_table_of_contents.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a table of contents to an .xlsx (Excel) file — create_table_of_contents","title":"Adds a table of contents to an .xlsx (Excel) file — create_table_of_contents","text":"function adds table contents Excel file reading information Excel sheet , using data create table contents. guesses information , see details .","code":""},{"path":"https://nhilder.github.io/xlr/reference/create_table_of_contents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a table of contents to an .xlsx (Excel) file — create_table_of_contents","text":"","code":"create_table_of_contents(   file,   title = NA_character_,   overwrite = TRUE,   pull_titles = TRUE,   TOC_sheet_name = \"Table of Contents\" )"},{"path":"https://nhilder.github.io/xlr/reference/create_table_of_contents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a table of contents to an .xlsx (Excel) file — create_table_of_contents","text":"file file name. title title table. overwrite logical. TRUE overwrite file, FALSE overwrite file. pull_titles TRUE take titles Excel sheets, add description TOC_sheet_name. TOC_sheet_name string. sheet name table contents.","code":""},{"path":"https://nhilder.github.io/xlr/reference/create_table_of_contents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a table of contents to an .xlsx (Excel) file — create_table_of_contents","text":"Returns logical error writing file succeeded.","code":""},{"path":"https://nhilder.github.io/xlr/reference/create_table_of_contents.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a table of contents to an .xlsx (Excel) file — create_table_of_contents","text":"function uses sheet names create table contents. titles pulls text position A1 sheets. chooses default location titles write xlr_table write_xlsx.","code":""},{"path":"https://nhilder.github.io/xlr/reference/create_table_of_contents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a table of contents to an .xlsx (Excel) file — create_table_of_contents","text":"","code":"library(xlr) library(openxlsx) table_list <- list(\"Sheet name 1\" = mtcars,                    \"Sheet name 2\" = mtcars)  output_file <- \"example_file.xlsx\"  # using write xlsx we create an `Excel` document # You could use xlr::write_xlsx to create a table of # contents automatically. write.xlsx(table_list,            output_file)  # Now add the table of contents to the existing file create_table_of_contents(output_file,                          \"A workbook with example tables\",                          # it only makes sense to pull titles when                          # the first cell has a text description                          pull_titles = FALSE)"},{"path":"https://nhilder.github.io/xlr/reference/is_xlr_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if an object is a xlr_format — is_xlr_format","title":"Test if an object is a xlr_format — is_xlr_format","text":"Test object xlr_format","code":""},{"path":"https://nhilder.github.io/xlr/reference/is_xlr_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if an object is a xlr_format — is_xlr_format","text":"","code":"is_xlr_format(x)"},{"path":"https://nhilder.github.io/xlr/reference/is_xlr_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if an object is a xlr_format — is_xlr_format","text":"x object test","code":""},{"path":"https://nhilder.github.io/xlr/reference/is_xlr_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if an object is a xlr_format — is_xlr_format","text":"logical.","code":""},{"path":"https://nhilder.github.io/xlr/reference/is_xlr_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if an object is a xlr_format — is_xlr_format","text":"","code":"# Test if an object is a xlr_format is_xlr_format(1) #> [1] FALSE bf <- xlr_format(font_size = 14) is_xlr_format(bf) #> [1] TRUE"},{"path":"https://nhilder.github.io/xlr/reference/is_xlr_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a variable is an xlr type This function tests whether an R variable has a xlr type. — is_xlr_type","title":"Check if a variable is an xlr type This function tests whether an R variable has a xlr type. — is_xlr_type","text":"Check variable xlr type function tests whether R variable xlr type.","code":""},{"path":"https://nhilder.github.io/xlr/reference/is_xlr_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a variable is an xlr type This function tests whether an R variable has a xlr type. — is_xlr_type","text":"","code":"is_xlr_type(x)"},{"path":"https://nhilder.github.io/xlr/reference/is_xlr_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a variable is an xlr type This function tests whether an R variable has a xlr type. — is_xlr_type","text":"x variable wish test","code":""},{"path":"https://nhilder.github.io/xlr/reference/is_xlr_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a variable is an xlr type This function tests whether an R variable has a xlr type. — is_xlr_type","text":"logical.","code":""},{"path":"https://nhilder.github.io/xlr/reference/update_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the xlr_table theme — update_theme","title":"Update the xlr_table theme — update_theme","text":"function allows update underlying styling xlr_table. changes titles, footnotes, columns, body objects look write xlr_table Excel write_xlsx().","code":""},{"path":"https://nhilder.github.io/xlr/reference/update_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the xlr_table theme — update_theme","text":"","code":"update_theme(   x,   title_format = xlr_format(font_size = 12, text_style = \"bold\"),   footnote_format = xlr_format(font_size = 9, text_style = \"italic\"),   column_heading_format = xlr_format(font_size = 11, text_style = \"bold\", border =     c(\"top\", \"bottom\"), halign = \"center\", wrap_text = TRUE),   table_body_format = xlr_format(border = c(\"top\", \"left\", \"right\", \"bottom\")) )"},{"path":"https://nhilder.github.io/xlr/reference/update_theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the xlr_table theme — update_theme","text":"x xlr_table title_format xlr_format object format title footnote_format xlr_format object format footnote column_heading_format xlr_format object format column heading table_body_format xlr_format object format body","code":""},{"path":"https://nhilder.github.io/xlr/reference/update_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update the xlr_table theme — update_theme","text":"Returns xlr_table object.","code":""},{"path":"https://nhilder.github.io/xlr/reference/update_theme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update the xlr_table theme — update_theme","text":"want change style columns data, convert xlr_vector, xlr_numeric, xlr_integer xlr_percent type already, update xlr_format attribute, setting style parameter.","code":""},{"path":"https://nhilder.github.io/xlr/reference/update_theme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update the xlr_table theme — update_theme","text":"","code":"library(xlr) # set up a basic table bt <- xlr_table(mtcars,                  \"A title\",                  \"A footnote\") # now we want to update the title # This changes what it look likes when we print it to `Excel` bt <- update_theme(bt,                    xlr_format(font_size = 12,                                text_style = c(\"bold\",\"underline\"))) # To see the change you must write to an Excel file write_xlsx(bt,            \"example.xlsx\",            \"Test\")"},{"path":"https://nhilder.github.io/xlr/reference/write_xlsx.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a xlr_table, data.frame, or tibble to an .xlsx (Excel) file — write_xlsx","title":"Write a xlr_table, data.frame, or tibble to an .xlsx (Excel) file — write_xlsx","text":"function writes xlr_table, data.frame, tibble .xlsx (Excel file). Like write.xlsx can also write list xlr_table's, data.frame's, tibbles's one file. main use function uses formatting xlr_table writes Excel sheet. See xlr_table information.","code":""},{"path":"https://nhilder.github.io/xlr/reference/write_xlsx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a xlr_table, data.frame, or tibble to an .xlsx (Excel) file — write_xlsx","text":"","code":"write_xlsx(   x,   file,   sheet_name = NULL,   overwrite = FALSE,   append = TRUE,   TOC = FALSE,   TOC_title = NA_character_,   overwrite_sheets = TRUE,   excel_data_table = TRUE )"},{"path":"https://nhilder.github.io/xlr/reference/write_xlsx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a xlr_table, data.frame, or tibble to an .xlsx (Excel) file — write_xlsx","text":"x single list types xlr_table, data.frame, tibble. file character. valid file path. sheet_name sheet name (optional). valid pass single object x. overwrite logical. Whether overwrite file/worksheet . append logical. Whether append worksheet existing file. TOC logical. Whether create table contents document. Works pass list x. add table contents existing file, use create_table_of_contents(). TOC_title character. specify table contents title (optional). overwrite_sheets logical. Whether overwrite existing sheets file. excel_data_table logical. Whether save data Excel table worksheet. accessible data sheet.","code":""},{"path":"https://nhilder.github.io/xlr/reference/write_xlsx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a xlr_table, data.frame, or tibble to an .xlsx (Excel) file — write_xlsx","text":"None","code":""},{"path":"https://nhilder.github.io/xlr/reference/write_xlsx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a xlr_table, data.frame, or tibble to an .xlsx (Excel) file — write_xlsx","text":"","code":"library(xlr) library(tibble) # we can write a data.frame or tibble with write_xlsx example_tibble <- tibble(example = c(1:100))  write_xlsx(mtcars,            \"example_file.xlsx\",            sheet_name = \"Example sheet\") #> ℹ Appending file: example_file.xlsx  # you must specify a sheet name write_xlsx(example_tibble,            \"example_file.xlsx\",            sheet_name = \"Example sheet\") #> ℹ Appending file: example_file.xlsx  # You can write a xlr_table. # When you write a xlr_table you can specify the formatting as well as titles # and footnotes. example_xlr_table <- xlr_table(mtcars,                                  \"This is a title\",                                  \"This is a footnote\")  write_xlsx(example_xlr_table,            \"example_file.xlsx\",            \"Example sheet\") #> ℹ Appending file: example_file.xlsx  # like openxlsx, you can also pass a list table_list <- list(\"Sheet name 1\" = xlr_table(mtcars,                                                \"This is a title\",                                                \"This is a footnote\"),                    \"Sheet name 2\" = xlr_table(mtcars,                                               \"This is a title too\",                                               \"This is a footnote as well\"))  write_xlsx(table_list,            \"example_file.xlsx\") #> ℹ Appending file: example_file.xlsx"},{"path":"https://nhilder.github.io/xlr/reference/xlr-vctrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal vctrs methods — xlr-vctrs","title":"Internal vctrs methods — xlr-vctrs","text":"Internal vctrs methods","code":""},{"path":"https://nhilder.github.io/xlr/reference/xlr_and_dplyr.html","id":null,"dir":"Reference","previous_headings":"","what":"xlr and dplyr — xlr_and_dplyr","title":"xlr and dplyr — xlr_and_dplyr","text":"xlr_table() designed work dplyr verbs default. mutate, summarise, arrange etc. data without losing xlr_table information. Particularly used build_table first data, outputs data xlr_table. list currently supported dplyrs verbs : arrange, distinct, filter, mutate, relocate, rename, rename_with, rowwise, select, slice, slice_head, slice_max, slice_min, slice_sample, slice_tail, summarise.","code":""},{"path":"https://nhilder.github.io/xlr/reference/xlr_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify formatting options for xlr_* types — xlr_format","title":"Specify formatting options for xlr_* types — xlr_format","text":"function utility work openxlxs's createStyle, work styles . xlr_format_numeric() alias xlr_format() different default values.","code":""},{"path":"https://nhilder.github.io/xlr/reference/xlr_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify formatting options for xlr_* types — xlr_format","text":"","code":"xlr_format(   font_size = 11,   font_colour = \"black\",   font = \"calibri\",   text_style = NULL,   border = NULL,   border_colour = \"black\",   border_style = \"thin\",   background_colour = NULL,   halign = \"left\",   valign = \"top\",   wrap_text = FALSE,   text_rotation = 0L,   indent = 0L )  xlr_format_numeric(   font_size = 11,   font_colour = \"black\",   font = \"calibri\",   text_style = NULL,   border = NULL,   border_colour = \"black\",   border_style = \"thin\",   background_colour = NULL,   halign = \"right\",   valign = \"bottom\",   wrap_text = FALSE,   text_rotation = 0L,   indent = 0L )"},{"path":"https://nhilder.github.io/xlr/reference/xlr_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify formatting options for xlr_* types — xlr_format","text":"font_size numeric. font size, must greater 0. font_colour String. colour text cell. Must one colours() valid hex colour beginning \"#\". font String. name font. validated. text_style text styling. can pass vector text decorations single string. options text style \"bold\", \"strikeout\", \"italic\", \"underline\",\"underline2\" (double underline), \"accounting\" (accounting underline), \"accounting2\" (double accounting underline). See Details. border cell border. can pass vector \"top\", \"bottom\", \"left\", \"right\" single string set borders want. border_colour Character. colour border. Must length number sides specified border. element must one colours() valid hex colour beginning \"#\". border_style Border line style vector length number sides specified border. list styles \"none\", \"thin\", \"medium\", \"dashed\", \"dotted\", \"thick\", \"double\", \"hair\", \"mediumDashed\", \"dashDot\", \"mediumDashDot\", \"dashDotDot\", \"mediumDashDot\", \"dastDotDot\", \"mediumDashDotDot\", \"slantDashDosh\". See createStyle details. background_colour Character. Set background colour cell. Must one colours() valid hex colour beginning \"#\". halign horizontal alignment cell contents. Must either \"left\", \"right\", \"center\" \"justify\". valign vertical alignment cell contents. Must either \"top\", \"center\", \"bottom\". wrap_text Logical. TRUE cell contents rap fit column. text_rotation Integer. Rotation text degrees. Must integer -90 90. indent Integer. number indent positions, must integer 0 250.","code":""},{"path":"https://nhilder.github.io/xlr/reference/xlr_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify formatting options for xlr_* types — xlr_format","text":"xlr_format S3 class.","code":""},{"path":[]},{"path":"https://nhilder.github.io/xlr/reference/xlr_format.html","id":"text-styling","dir":"Reference","previous_headings":"","what":"Text styling","title":"Specify formatting options for xlr_* types — xlr_format","text":"text styling can pass either one options options vector. example like text bold italised set:   like text bold :","code":"fmt <- xlr_format(text_style = c(\"bold\", \"italic\")) fmt <- xlr_format(text_style = \"bold\")"},{"path":"https://nhilder.github.io/xlr/reference/xlr_format.html","id":"border-styling","dir":"Reference","previous_headings":"","what":"Border styling","title":"Specify formatting options for xlr_* types — xlr_format","text":"three arguments create border styling border, border_colour, border_style. take either vector, specify change borders cell look like. specify want border around cell, use border, need pass vector sides want border (single element one side). example: \"top\" top border \"left\" left border c(\"bottom\", \"right\") top bottom border c(\"left\", \"right\", \"bottom\") left, right bottom borders c(\"top\",\"right\",\"bottom\",\"left\") borders sides cells Based can use border_colour set border colours. want border colour, just pass character representing colour want (e.g. set border_colour = \"blue\" like borders blue). Alternatively can pass vector length vector passed border, location specifying colour. example, set:   top border red, left border blue. set pattern way border_style. Alternatively wanted dashed default colours. set:","code":"fmt <- xlr_format(border = c(\"left\", \"top\"),                     border_colour = c(\"blue\",\"red\")) fmt <- xlr_format(border = c(\"left\", \"top\"),                   border_style = \"dashed\")"},{"path":[]},{"path":"https://nhilder.github.io/xlr/reference/xlr_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify formatting options for xlr_* types — xlr_format","text":"","code":"library(xlr) # You can initialise a xlr_format, it comes with a list of defaults bf <- xlr_format() # It outputs what the style looks like bf #> -- Text styling: #> size: 11, colour: \"black\", font: \"calibri\", style: #> -- Text alignment: #> Horizontal: \"left\", Vertical: \"top\", Indent: 0, Rotation: 0, Wrap text: FALSE # You can update the format by defining a new format bf <- xlr_format(font_size = 11,                   # not that font is not validated                   font = \"helvetica\") # The main use of xlr_format is to change the format of a vector of # a xlr type bd <- xlr_numeric(1:200,                   dp = 1,                   style = bf) # You can also use it to change the styles of an xlr_table, this only # affect the format in `Excel` bt <- xlr_table(mtcars, \"A clever title\", \"A useful footnote\") bt <- bt |>       update_theme(footnote_format = xlr_format(font_size = 7))"},{"path":"https://nhilder.github.io/xlr/reference/xlr_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"xlr_integer vector — xlr_integer","title":"xlr_integer vector — xlr_integer","text":"creates integer vector printed neatly can easily exported Excel using native format.can convert vector back base type as_base_r().","code":""},{"path":"https://nhilder.github.io/xlr/reference/xlr_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"xlr_integer vector — xlr_integer","text":"","code":"xlr_integer(x = integer(), style = xlr_format_numeric())  is_xlr_integer(x)  as_xlr_integer(x, style = xlr_format_numeric())"},{"path":"https://nhilder.github.io/xlr/reference/xlr_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"xlr_integer vector — xlr_integer","text":"x numeric vector xlr_integer(): numeric vector is_xlr_integer(): object test as_xlr_integer() : vector style Additional styling options vector. See xlr_format_numeric details.","code":""},{"path":"https://nhilder.github.io/xlr/reference/xlr_integer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"xlr_integer vector — xlr_integer","text":"S3 vector class xlr_integer","code":""},{"path":"https://nhilder.github.io/xlr/reference/xlr_integer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"xlr_integer vector — xlr_integer","text":"Internally, xlr_integer uses vec_cast convert numeric types integers. Anything vec_cast can handle can xlr_integer. Read casting vec_cast.","code":""},{"path":[]},{"path":"https://nhilder.github.io/xlr/reference/xlr_integer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"xlr_integer vector — xlr_integer","text":"","code":"library(xlr) # Create a variable to represent an integer x <- xlr_integer(2) # This will print nicely x #> <xlr_integer[1]> #> [1] 2 # You can change the styling, which affects how it looks when we save it as an # `Excel` document x <- xlr_integer(x, style = xlr_format(font_size = 9, font_colour = \"red\")) x #> <xlr_integer[1]> #> [1] 2 # We can also define a vector of integers y <- xlr_integer(c(1,2,3)) y #> <xlr_integer[3]> #> [1] 1 2 3 # You can convert existing data to a integer using dplyr verbs # It formats large numbers nicely df <- data.frame(col_1 = c(1:100*100)) df |>   dplyr::mutate(col_pct = as_xlr_integer(col_1)) #>     col_1 col_pct #> 1     100     100 #> 2     200     200 #> 3     300     300 #> 4     400     400 #> 5     500     500 #> 6     600     600 #> 7     700     700 #> 8     800     800 #> 9     900     900 #> 10   1000   1,000 #> 11   1100   1,100 #> 12   1200   1,200 #> 13   1300   1,300 #> 14   1400   1,400 #> 15   1500   1,500 #> 16   1600   1,600 #> 17   1700   1,700 #> 18   1800   1,800 #> 19   1900   1,900 #> 20   2000   2,000 #> 21   2100   2,100 #> 22   2200   2,200 #> 23   2300   2,300 #> 24   2400   2,400 #> 25   2500   2,500 #> 26   2600   2,600 #> 27   2700   2,700 #> 28   2800   2,800 #> 29   2900   2,900 #> 30   3000   3,000 #> 31   3100   3,100 #> 32   3200   3,200 #> 33   3300   3,300 #> 34   3400   3,400 #> 35   3500   3,500 #> 36   3600   3,600 #> 37   3700   3,700 #> 38   3800   3,800 #> 39   3900   3,900 #> 40   4000   4,000 #> 41   4100   4,100 #> 42   4200   4,200 #> 43   4300   4,300 #> 44   4400   4,400 #> 45   4500   4,500 #> 46   4600   4,600 #> 47   4700   4,700 #> 48   4800   4,800 #> 49   4900   4,900 #> 50   5000   5,000 #> 51   5100   5,100 #> 52   5200   5,200 #> 53   5300   5,300 #> 54   5400   5,400 #> 55   5500   5,500 #> 56   5600   5,600 #> 57   5700   5,700 #> 58   5800   5,800 #> 59   5900   5,900 #> 60   6000   6,000 #> 61   6100   6,100 #> 62   6200   6,200 #> 63   6300   6,300 #> 64   6400   6,400 #> 65   6500   6,500 #> 66   6600   6,600 #> 67   6700   6,700 #> 68   6800   6,800 #> 69   6900   6,900 #> 70   7000   7,000 #> 71   7100   7,100 #> 72   7200   7,200 #> 73   7300   7,300 #> 74   7400   7,400 #> 75   7500   7,500 #> 76   7600   7,600 #> 77   7700   7,700 #> 78   7800   7,800 #> 79   7900   7,900 #> 80   8000   8,000 #> 81   8100   8,100 #> 82   8200   8,200 #> 83   8300   8,300 #> 84   8400   8,400 #> 85   8500   8,500 #> 86   8600   8,600 #> 87   8700   8,700 #> 88   8800   8,800 #> 89   8900   8,900 #> 90   9000   9,000 #> 91   9100   9,100 #> 92   9200   9,200 #> 93   9300   9,300 #> 94   9400   9,400 #> 95   9500   9,500 #> 96   9600   9,600 #> 97   9700   9,700 #> 98   9800   9,800 #> 99   9900   9,900 #> 100 10000  10,000 # You can use as_xlr_integer to convert a string in a integer df <- data.frame(col_str = c(\"12\",\"13\",\"14\")) # now we can convert the string to a integer(), internally it uses the same # logic as as.integer() df |>   dplyr::mutate(col_percent = as_xlr_integer(col_str)) #>   col_str col_percent #> 1      12          12 #> 2      13          13 #> 3      14          14"},{"path":"https://nhilder.github.io/xlr/reference/xlr_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"xlr_numeric vector — xlr_numeric","title":"xlr_numeric vector — xlr_numeric","text":"creates numeric vector printed neatly can easily exported Excel using native format. can convert vector back base type as_base_r().","code":""},{"path":"https://nhilder.github.io/xlr/reference/xlr_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"xlr_numeric vector — xlr_numeric","text":"","code":"xlr_numeric(   x = numeric(),   dp = 2L,   scientific = FALSE,   style = xlr_format_numeric() )  is_xlr_numeric(x)  as_xlr_numeric(x, dp = 0L, scientific = FALSE, style = xlr_format_numeric())"},{"path":"https://nhilder.github.io/xlr/reference/xlr_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"xlr_numeric vector — xlr_numeric","text":"x xlr_numeric(): numeric vector is_xlr_numeric(): object test as_xlr_numeric() : vector dp number decimal places print scientific logical. Whether format numeric using scientific notation. style Additional styling options vector. See xlr_format_numeric details.","code":""},{"path":"https://nhilder.github.io/xlr/reference/xlr_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"xlr_numeric vector — xlr_numeric","text":"S3 vector class xlr_numeric","code":""},{"path":"https://nhilder.github.io/xlr/reference/xlr_numeric.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"xlr_numeric vector — xlr_numeric","text":"Internally, xlr_numeric uses vec_cast convert numeric types integers. Anything vec_cast can handle can xlr_numeric. Read casting vec_cast.","code":""},{"path":[]},{"path":"https://nhilder.github.io/xlr/reference/xlr_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"xlr_numeric vector — xlr_numeric","text":"","code":"library(xlr) # Create a variable to represent a double with two decimal places # The decimal places must be a positive integer x <- xlr_numeric(2.1134,dp = 2) # This will print nicely x #> <xlr_numeric[1]> #> [1] 2.11 # You can change the styling, which affects how it looks when we print it x <- xlr_numeric(x, dp = 3L, style = xlr_format(font_size = 9, font_colour = \"red\")) x #> <xlr_numeric[1]> #> [1] 2.113 # We can also define a vector of doubles y <- xlr_numeric(c(22.1055,1.3333333,3.1234567), dp = 2) y #> <xlr_numeric[3]> #> [1] 22.11 1.33  3.12  # You can convert existing data to a double using dplyr verbs df <- data.frame(col_1 = c(2,3.2,1.33,4.43251)) df |>   dplyr::mutate(col_pct = as_xlr_numeric(col_1)) #>     col_1 col_pct #> 1 2.00000       2 #> 2 3.20000       3 #> 3 1.33000       1 #> 4 4.43251       4 # You can use as_xlr_numeric to convert a string in a double df <- data.frame(col_str = c(\"12.22\",\"12.34567\",\"100\")) # now we can convert the string to a double(), internally it uses the same # logic as as.double() df |>   dplyr::mutate(col_double = as_xlr_numeric(col_str,2)) #>    col_str col_double #> 1    12.22      12.22 #> 2 12.34567      12.35 #> 3      100     100.00"},{"path":"https://nhilder.github.io/xlr/reference/xlr_percent.html","id":null,"dir":"Reference","previous_headings":"","what":"xlr_percent vector — xlr_percent","title":"xlr_percent vector — xlr_percent","text":"creates numeric vector printed percentage exported Excel using native format.can convert vector back base type as_base_r().","code":""},{"path":"https://nhilder.github.io/xlr/reference/xlr_percent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"xlr_percent vector — xlr_percent","text":"","code":"xlr_percent(x = double(), dp = 0L, style = xlr_format_numeric())  is_xlr_percent(x)  as_xlr_percent(x, dp = 0L, style = xlr_format_numeric())"},{"path":"https://nhilder.github.io/xlr/reference/xlr_percent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"xlr_percent vector — xlr_percent","text":"x xlr_percent(): numeric vector is_xlr_percent(): object test as_xlr_percent() : numeric character vector. character vector, data must format \"XXX.YYY...%\". dp number decimal places print style Additional styling options vector. See xlr_format_numeric details.","code":""},{"path":"https://nhilder.github.io/xlr/reference/xlr_percent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"xlr_percent vector — xlr_percent","text":"S3 vector class xlr_percent","code":""},{"path":[]},{"path":"https://nhilder.github.io/xlr/reference/xlr_percent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"xlr_percent vector — xlr_percent","text":"","code":"library(xlr) # lets define a xlr_percent, a xlr_percent is between a number between [0-1], not # between 1-100 # # Create a variable to represent 10% x <- xlr_percent(0.1) # This will print nicely x #> <xlr_percent[1]> #> [1] 10% # Now we can increase the number of decimal places to display # The decimal places must be a positive integer x <- xlr_percent(x, dp = 3L) x #> <xlr_percent[1]> #> [1] 10.000% # We can also define a vector of xlr_percents y <- xlr_percent(c(0.1055,0.3333333,0.1234567), dp = 2) y #> <xlr_percent[3]> #> [1] 10.55% 33.33% 12.35% # You can convert existing data to a xlr_percentage using dplyr verbs df <- data.frame(col_1 = c(0,0.2,0.33,0.43251)) df |>   dplyr::mutate(col_pct = as_xlr_percent(col_1)) #>     col_1 col_pct #> 1 0.00000      0% #> 2 0.20000     20% #> 3 0.33000     33% #> 4 0.43251     43% # You can also change the styling of a xlr_percent column, this is only relevant # if you print it to `Excel` with write_xlsx df |>   dplyr::mutate(col_pct = xlr_percent(col_1,                                   dp = 2,                                   style = xlr_format(font_size = 8))) #>     col_1 col_pct #> 1 0.00000   0.00% #> 2 0.20000  20.00% #> 3 0.33000  33.00% #> 4 0.43251  43.25% # You can use as_xlr_percent to convert a string in a xlr_percentage format to a # xlr_percent df <- data.frame(col_str = c(\"12.22%\",\"12.34567%\",\"100%\")) # now we can convert the string to a xlr_xlr_percent() df |>   dplyr::mutate(col_xlr_percent = as_xlr_percent(col_str,2)) #>     col_str col_xlr_percent #> 1    12.22%          12.22% #> 2 12.34567%          12.35% #> 3      100%         100.00%"},{"path":"https://nhilder.github.io/xlr/reference/xlr_table.html","id":null,"dir":"Reference","previous_headings":"","what":"xlr_table object — xlr_table","title":"xlr_table object — xlr_table","text":"Create xlr_table S3 object. used create object stores formatting information, well title footnote. objects makes easy convert Excel sheet, using write_xlsx(). edit underlying formatting options use update_theme(). number dplyr methods implemented xlr_table, include mutate, summarise, select, etc. means can use functions xlr_table, without losing xlr_table attributes. can check dplyr function supported checking documentation function. Currently, possible use group_by xlr_table, require implementation new class. can convert table back data.frame base type as_base_r().","code":""},{"path":"https://nhilder.github.io/xlr/reference/xlr_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"xlr_table object — xlr_table","text":"","code":"xlr_table(x, title = character(), footnote = character())  is_xlr_table(x)  as_xlr_table(x, title = character(), footnote = character())"},{"path":"https://nhilder.github.io/xlr/reference/xlr_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"xlr_table object — xlr_table","text":"x data object xlr_table() : data.frame, tibble. See notes details. is_xlr_table() : object as_xlr_table() data.frame, tibble. title string title footnote string footnote","code":""},{"path":"https://nhilder.github.io/xlr/reference/xlr_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"xlr_table object — xlr_table","text":"xlr_table S3 class","code":""},{"path":[]},{"path":"https://nhilder.github.io/xlr/reference/xlr_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"xlr_table object — xlr_table","text":"","code":"library(xlr) library(dplyr) # Create a xlr_table, we set the footnotes and the title # It converts to the xlr types by default x <- xlr_table(mtcars,                 title = \"mtcars is a fun data set\",                 footnote = \"mtcars is a data set that comes with base R\") # The title and the footnote print to console x #>  #> ── mtcars is a fun data set ──────────────────────────────────────────────────── #> # A xlr_table: 32 x 11 #>        mpg     cyl    disp      hp    drat      wt  qsec    vs    am  gear  carb #>    <x_dbl> <x_dbl> <x_dbl> <x_dbl> <x_dbl> <x_dbl> <x_d> <x_d> <x_d> <x_d> <x_d> #>  1   21.00    6.00  160.00  110.00    3.90    2.62 16.46  0.00  1.00  4.00  4.00 #>  2   21.00    6.00  160.00  110.00    3.90    2.88 17.02  0.00  1.00  4.00  4.00 #>  3   22.80    4.00  108.00   93.00    3.85    2.32 18.61  1.00  1.00  4.00  1.00 #>  4   21.40    6.00  258.00  110.00    3.08    3.21 19.44  1.00  0.00  3.00  1.00 #>  5   18.70    8.00  360.00  175.00    3.15    3.44 17.02  0.00  0.00  3.00  2.00 #>  6   18.10    6.00  225.00  105.00    2.76    3.46 20.22  1.00  0.00  3.00  1.00 #>  7   14.30    8.00  360.00  245.00    3.21    3.57 15.84  0.00  0.00  3.00  4.00 #>  8   24.40    4.00  146.70   62.00    3.69    3.19 20.00  1.00  0.00  4.00  2.00 #>  9   22.80    4.00  140.80   95.00    3.92    3.15 22.90  1.00  0.00  4.00  2.00 #> 10   19.20    6.00  167.60  123.00    3.92    3.44 18.30  1.00  0.00  4.00  4.00 #> # ℹ 22 more rows #> mtcars is a data set that comes with base R # You can use mutate and summarise with xlr_tables and they are preserved x |>   summarise(mean_mpg = sum(mpg)) #>  #> ── mtcars is a fun data set ──────────────────────────────────────────────────── #> # A xlr_table: 1 x 1 #>   mean_mpg #>    <x_dbl> #> 1   642.90 #> mtcars is a data set that comes with base R # Rename a column x |>   rename(new_name = mpg) #>  #> ── mtcars is a fun data set ──────────────────────────────────────────────────── #> # A xlr_table: 32 x 11 #>    new_name     cyl    disp      hp    drat     wt  qsec    vs    am  gear  carb #>     <x_dbl> <x_dbl> <x_dbl> <x_dbl> <x_dbl> <x_db> <x_d> <x_d> <x_d> <x_d> <x_d> #>  1    21.00    6.00  160.00  110.00    3.90   2.62 16.46  0.00  1.00  4.00  4.00 #>  2    21.00    6.00  160.00  110.00    3.90   2.88 17.02  0.00  1.00  4.00  4.00 #>  3    22.80    4.00  108.00   93.00    3.85   2.32 18.61  1.00  1.00  4.00  1.00 #>  4    21.40    6.00  258.00  110.00    3.08   3.21 19.44  1.00  0.00  3.00  1.00 #>  5    18.70    8.00  360.00  175.00    3.15   3.44 17.02  0.00  0.00  3.00  2.00 #>  6    18.10    6.00  225.00  105.00    2.76   3.46 20.22  1.00  0.00  3.00  1.00 #>  7    14.30    8.00  360.00  245.00    3.21   3.57 15.84  0.00  0.00  3.00  4.00 #>  8    24.40    4.00  146.70   62.00    3.69   3.19 20.00  1.00  0.00  4.00  2.00 #>  9    22.80    4.00  140.80   95.00    3.92   3.15 22.90  1.00  0.00  4.00  2.00 #> 10    19.20    6.00  167.60  123.00    3.92   3.44 18.30  1.00  0.00  4.00  4.00 #> # ℹ 22 more rows #> mtcars is a data set that comes with base R # When you want to change how elements of the table look when written using # write_xlsx, you can update it with update them x <- x |>   # make the font bigger   update_theme(title_format = xlr_format(font_size = 14)) # you must write it in order to see the formatting changes write_xlsx(x,              \"example.xlsx\",              \"A example sheet\",              TOC = FALSE) #> ℹ Appending file: example.xlsx"},{"path":"https://nhilder.github.io/xlr/reference/xlr_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"xlr_vector vector — xlr_vector","title":"xlr_vector vector — xlr_vector","text":"general container including additional styling options within vector can easily exported Excel. vector type used characters, factors, Booleans, complex numbers, etc. support dates.","code":""},{"path":"https://nhilder.github.io/xlr/reference/xlr_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"xlr_vector vector — xlr_vector","text":"","code":"xlr_vector(x = vector(), excel_format = \"GENERAL\", style = xlr_format())  is_xlr_vector(x)  as_xlr_vector(x, excel_format = \"GENERAL\", style = xlr_format())"},{"path":"https://nhilder.github.io/xlr/reference/xlr_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"xlr_vector vector — xlr_vector","text":"x vector xlr_vector(): vector is_xlr_vector(): object test as_xlr_vector() : vector excel_format character, Excel cell format, validated. See createStyle argument numFmt details can specify. style Additional styling options vector. See xlr_format details.","code":""},{"path":"https://nhilder.github.io/xlr/reference/xlr_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"xlr_vector vector — xlr_vector","text":"S3 vector class xlr_vector","code":""},{"path":"https://nhilder.github.io/xlr/reference/xlr_vector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"xlr_vector vector — xlr_vector","text":"can use integer, double types specifying associated Excel format, recommend using xlr_integer, xlr_numeric, xlr_percent types instead. can convert vector back base type as_base_r().","code":""},{"path":[]},{"path":"https://nhilder.github.io/xlr/reference/xlr_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"xlr_vector vector — xlr_vector","text":"","code":"library(xlr) # Create a xlr_vector object, this is used so we can add styling to an existing # vector so that it prints nicely in `Excel` # # Note currently the style will not change the style in the console x <- xlr_vector(1:100,                  excel_format = \"00.0##\",                  style = xlr_format(font_size = 8))  # You can also use it so that dates are nicely printed in `Excel` dates <- c(\"02/27/92\", \"02/27/92\", \"01/14/92\", \"02/28/92\", \"02/01/92\") dates <- as.Date(dates, \"%m/%d/%y\") x <- xlr_vector(dates,                  # Print it as a long date in `Excel`                  excel_format = \"LONGDATE\") # You can convert existing data to a xlr_vectors using dplyr verbs iris |>   dplyr::mutate(iris_format = as_xlr_vector(Species,                                              \"TEXT\",                                              xlr_format(text_style = \"italic\"))) #>     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species iris_format #> 1            5.1         3.5          1.4         0.2     setosa           1 #> 2            4.9         3.0          1.4         0.2     setosa           1 #> 3            4.7         3.2          1.3         0.2     setosa           1 #> 4            4.6         3.1          1.5         0.2     setosa           1 #> 5            5.0         3.6          1.4         0.2     setosa           1 #> 6            5.4         3.9          1.7         0.4     setosa           1 #> 7            4.6         3.4          1.4         0.3     setosa           1 #> 8            5.0         3.4          1.5         0.2     setosa           1 #> 9            4.4         2.9          1.4         0.2     setosa           1 #> 10           4.9         3.1          1.5         0.1     setosa           1 #> 11           5.4         3.7          1.5         0.2     setosa           1 #> 12           4.8         3.4          1.6         0.2     setosa           1 #> 13           4.8         3.0          1.4         0.1     setosa           1 #> 14           4.3         3.0          1.1         0.1     setosa           1 #> 15           5.8         4.0          1.2         0.2     setosa           1 #> 16           5.7         4.4          1.5         0.4     setosa           1 #> 17           5.4         3.9          1.3         0.4     setosa           1 #> 18           5.1         3.5          1.4         0.3     setosa           1 #> 19           5.7         3.8          1.7         0.3     setosa           1 #> 20           5.1         3.8          1.5         0.3     setosa           1 #> 21           5.4         3.4          1.7         0.2     setosa           1 #> 22           5.1         3.7          1.5         0.4     setosa           1 #> 23           4.6         3.6          1.0         0.2     setosa           1 #> 24           5.1         3.3          1.7         0.5     setosa           1 #> 25           4.8         3.4          1.9         0.2     setosa           1 #> 26           5.0         3.0          1.6         0.2     setosa           1 #> 27           5.0         3.4          1.6         0.4     setosa           1 #> 28           5.2         3.5          1.5         0.2     setosa           1 #> 29           5.2         3.4          1.4         0.2     setosa           1 #> 30           4.7         3.2          1.6         0.2     setosa           1 #> 31           4.8         3.1          1.6         0.2     setosa           1 #> 32           5.4         3.4          1.5         0.4     setosa           1 #> 33           5.2         4.1          1.5         0.1     setosa           1 #> 34           5.5         4.2          1.4         0.2     setosa           1 #> 35           4.9         3.1          1.5         0.2     setosa           1 #> 36           5.0         3.2          1.2         0.2     setosa           1 #> 37           5.5         3.5          1.3         0.2     setosa           1 #> 38           4.9         3.6          1.4         0.1     setosa           1 #> 39           4.4         3.0          1.3         0.2     setosa           1 #> 40           5.1         3.4          1.5         0.2     setosa           1 #> 41           5.0         3.5          1.3         0.3     setosa           1 #> 42           4.5         2.3          1.3         0.3     setosa           1 #> 43           4.4         3.2          1.3         0.2     setosa           1 #> 44           5.0         3.5          1.6         0.6     setosa           1 #> 45           5.1         3.8          1.9         0.4     setosa           1 #> 46           4.8         3.0          1.4         0.3     setosa           1 #> 47           5.1         3.8          1.6         0.2     setosa           1 #> 48           4.6         3.2          1.4         0.2     setosa           1 #> 49           5.3         3.7          1.5         0.2     setosa           1 #> 50           5.0         3.3          1.4         0.2     setosa           1 #> 51           7.0         3.2          4.7         1.4 versicolor           2 #> 52           6.4         3.2          4.5         1.5 versicolor           2 #> 53           6.9         3.1          4.9         1.5 versicolor           2 #> 54           5.5         2.3          4.0         1.3 versicolor           2 #> 55           6.5         2.8          4.6         1.5 versicolor           2 #> 56           5.7         2.8          4.5         1.3 versicolor           2 #> 57           6.3         3.3          4.7         1.6 versicolor           2 #> 58           4.9         2.4          3.3         1.0 versicolor           2 #> 59           6.6         2.9          4.6         1.3 versicolor           2 #> 60           5.2         2.7          3.9         1.4 versicolor           2 #> 61           5.0         2.0          3.5         1.0 versicolor           2 #> 62           5.9         3.0          4.2         1.5 versicolor           2 #> 63           6.0         2.2          4.0         1.0 versicolor           2 #> 64           6.1         2.9          4.7         1.4 versicolor           2 #> 65           5.6         2.9          3.6         1.3 versicolor           2 #> 66           6.7         3.1          4.4         1.4 versicolor           2 #> 67           5.6         3.0          4.5         1.5 versicolor           2 #> 68           5.8         2.7          4.1         1.0 versicolor           2 #> 69           6.2         2.2          4.5         1.5 versicolor           2 #> 70           5.6         2.5          3.9         1.1 versicolor           2 #> 71           5.9         3.2          4.8         1.8 versicolor           2 #> 72           6.1         2.8          4.0         1.3 versicolor           2 #> 73           6.3         2.5          4.9         1.5 versicolor           2 #> 74           6.1         2.8          4.7         1.2 versicolor           2 #> 75           6.4         2.9          4.3         1.3 versicolor           2 #> 76           6.6         3.0          4.4         1.4 versicolor           2 #> 77           6.8         2.8          4.8         1.4 versicolor           2 #> 78           6.7         3.0          5.0         1.7 versicolor           2 #> 79           6.0         2.9          4.5         1.5 versicolor           2 #> 80           5.7         2.6          3.5         1.0 versicolor           2 #> 81           5.5         2.4          3.8         1.1 versicolor           2 #> 82           5.5         2.4          3.7         1.0 versicolor           2 #> 83           5.8         2.7          3.9         1.2 versicolor           2 #> 84           6.0         2.7          5.1         1.6 versicolor           2 #> 85           5.4         3.0          4.5         1.5 versicolor           2 #> 86           6.0         3.4          4.5         1.6 versicolor           2 #> 87           6.7         3.1          4.7         1.5 versicolor           2 #> 88           6.3         2.3          4.4         1.3 versicolor           2 #> 89           5.6         3.0          4.1         1.3 versicolor           2 #> 90           5.5         2.5          4.0         1.3 versicolor           2 #> 91           5.5         2.6          4.4         1.2 versicolor           2 #> 92           6.1         3.0          4.6         1.4 versicolor           2 #> 93           5.8         2.6          4.0         1.2 versicolor           2 #> 94           5.0         2.3          3.3         1.0 versicolor           2 #> 95           5.6         2.7          4.2         1.3 versicolor           2 #> 96           5.7         3.0          4.2         1.2 versicolor           2 #> 97           5.7         2.9          4.2         1.3 versicolor           2 #> 98           6.2         2.9          4.3         1.3 versicolor           2 #> 99           5.1         2.5          3.0         1.1 versicolor           2 #> 100          5.7         2.8          4.1         1.3 versicolor           2 #> 101          6.3         3.3          6.0         2.5  virginica           3 #> 102          5.8         2.7          5.1         1.9  virginica           3 #> 103          7.1         3.0          5.9         2.1  virginica           3 #> 104          6.3         2.9          5.6         1.8  virginica           3 #> 105          6.5         3.0          5.8         2.2  virginica           3 #> 106          7.6         3.0          6.6         2.1  virginica           3 #> 107          4.9         2.5          4.5         1.7  virginica           3 #> 108          7.3         2.9          6.3         1.8  virginica           3 #> 109          6.7         2.5          5.8         1.8  virginica           3 #> 110          7.2         3.6          6.1         2.5  virginica           3 #> 111          6.5         3.2          5.1         2.0  virginica           3 #> 112          6.4         2.7          5.3         1.9  virginica           3 #> 113          6.8         3.0          5.5         2.1  virginica           3 #> 114          5.7         2.5          5.0         2.0  virginica           3 #> 115          5.8         2.8          5.1         2.4  virginica           3 #> 116          6.4         3.2          5.3         2.3  virginica           3 #> 117          6.5         3.0          5.5         1.8  virginica           3 #> 118          7.7         3.8          6.7         2.2  virginica           3 #> 119          7.7         2.6          6.9         2.3  virginica           3 #> 120          6.0         2.2          5.0         1.5  virginica           3 #> 121          6.9         3.2          5.7         2.3  virginica           3 #> 122          5.6         2.8          4.9         2.0  virginica           3 #> 123          7.7         2.8          6.7         2.0  virginica           3 #> 124          6.3         2.7          4.9         1.8  virginica           3 #> 125          6.7         3.3          5.7         2.1  virginica           3 #> 126          7.2         3.2          6.0         1.8  virginica           3 #> 127          6.2         2.8          4.8         1.8  virginica           3 #> 128          6.1         3.0          4.9         1.8  virginica           3 #> 129          6.4         2.8          5.6         2.1  virginica           3 #> 130          7.2         3.0          5.8         1.6  virginica           3 #> 131          7.4         2.8          6.1         1.9  virginica           3 #> 132          7.9         3.8          6.4         2.0  virginica           3 #> 133          6.4         2.8          5.6         2.2  virginica           3 #> 134          6.3         2.8          5.1         1.5  virginica           3 #> 135          6.1         2.6          5.6         1.4  virginica           3 #> 136          7.7         3.0          6.1         2.3  virginica           3 #> 137          6.3         3.4          5.6         2.4  virginica           3 #> 138          6.4         3.1          5.5         1.8  virginica           3 #> 139          6.0         3.0          4.8         1.8  virginica           3 #> 140          6.9         3.1          5.4         2.1  virginica           3 #> 141          6.7         3.1          5.6         2.4  virginica           3 #> 142          6.9         3.1          5.1         2.3  virginica           3 #> 143          5.8         2.7          5.1         1.9  virginica           3 #> 144          6.8         3.2          5.9         2.3  virginica           3 #> 145          6.7         3.3          5.7         2.5  virginica           3 #> 146          6.7         3.0          5.2         2.3  virginica           3 #> 147          6.3         2.5          5.0         1.9  virginica           3 #> 148          6.5         3.0          5.2         2.0  virginica           3 #> 149          6.2         3.4          5.4         2.3  virginica           3 #> 150          5.9         3.0          5.1         1.8  virginica           3"},{"path":[]},{"path":"https://nhilder.github.io/xlr/news/index.html","id":"xlr-103","dir":"Changelog","previous_headings":"","what":"xlr 1.0.3","title":"xlr 1.0.3","text":"CRAN release: 2025-03-07 Fixed title description follows CRAN’s standards (moved back-ticks single quotes)!","code":""},{"path":"https://nhilder.github.io/xlr/news/index.html","id":"xlr-102","dir":"Changelog","previous_headings":"","what":"xlr 1.0.2","title":"xlr 1.0.2","text":"Fixed title follows CRAN’s standards","code":""},{"path":"https://nhilder.github.io/xlr/news/index.html","id":"xlr-101","dir":"Changelog","previous_headings":"","what":"xlr 1.0.1","title":"xlr 1.0.1","text":"Made Excel referenced back-ticks ``. Removed externally facing documentation internal package functions. Change examples longer use \\dontrun instead create temporary working directory following readr examples. instead use \\dontshow hide setting working directory. Fixed typos vignette. Fixed line spacing issues Description due inconsistent space sizing.","code":""},{"path":"https://nhilder.github.io/xlr/news/index.html","id":"xlr-100","dir":"Changelog","previous_headings":"","what":"xlr 1.0.0","title":"xlr 1.0.0","text":"Initial CRAN submission.","code":""}]
